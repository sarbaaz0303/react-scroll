{"version":3,"sources":["API/pexels.api.js","API/unsplash.api.js","components/SearchBar/SearchBar.component.jsx","components/ImageCard/ImageCard.component.jsx","components/ImageList/ImageList.component.jsx","assets/spinner.svg","App.js","index.js"],"names":["pexelsAPI","axios","create","baseURL","headers","Authorization","unsplashAPI","params","order_by","SearchBar","state","query","onFormSubmit","e","preventDefault","props","handleFormSubmit","setState","onInputChange","target","value","className","onSubmit","this","type","id","placeholder","onChange","htmlFor","Component","ImageCard","spans","imageRef","createRef","setSpans","height","current","clientHeight","Math","ceil","addEventListener","img","images","style","gridRowEnd","href","link","rel","ref","src","alt","title","ImageList","map","App","page","per_page","prevY","loading","a","page_num","get","data","results","urls","regular","alt_description","links","html","console","warn","photos","large2x","photographer","url","handleIntersection","entities","observer","y","boundingClientRect","IntersectionObserver","root","rootMargin","threshold","observe","loadingRef","ReactLogo","ReactDOM","render","StrictMode","document","querySelector"],"mappings":"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","file":"static/js/main.19e2809e.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst instance = {\r\n    baseURL: \"https://api.pexels.com/v1\",\r\n    headers: {\r\n        Authorization:\r\n            \"563492ad6f9170000100000137cc855a2fd2468180221a16889a41c3\",\r\n    },\r\n};\r\n\r\nexport const pexelsAPI = axios.create(instance);\r\n","import axios from \"axios\";\r\n\r\nconst instance = {\r\n    baseURL: \"https://api.unsplash.com\",\r\n    headers: {\r\n        Authorization: \"Client-ID Nx29FGEJvUsUuymEBnno9x3bEfq1WC6uiB61wXfk_K0\",\r\n    },\r\n    params: {\r\n        order_by: \"latest\",\r\n    },\r\n};\r\n\r\nexport const unsplashAPI = axios.create(instance);\r\n","import React, { Component } from \"react\";\r\nimport \"./SearchBar.styles.scss\";\r\n\r\nexport default class SearchBar extends Component {\r\n    state = { query: \"\" };\r\n\r\n    onFormSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        this.props.handleFormSubmit(this.state.query);\r\n        this.setState({ query: \"\" });\r\n    };\r\n\r\n    onInputChange = (e) => {\r\n        this.setState({ query: e.target.value });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"form-container\">\r\n                <form className=\"form\" onSubmit={this.onFormSubmit}>\r\n                    <div className=\"form-group\">\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"form-input\"\r\n                            id=\"image-search\"\r\n                            placeholder=\"Image Search\"\r\n                            value={this.state.query}\r\n                            onChange={this.onInputChange}\r\n                        />\r\n                        <label htmlFor=\"image-search\" className=\"form-label\">\r\n                            Image Search\r\n                        </label>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component, createRef } from \"react\";\r\nimport \"./ImageCard.styles.scss\";\r\n\r\nexport default class ImageCard extends Component {\r\n    state = { spans: 0 };\r\n    imageRef = createRef();\r\n\r\n    componentDidMount() {\r\n        this.imageRef.current.addEventListener(\"load\", this.setSpans);\r\n    }\r\n\r\n    setSpans = () => {\r\n        const height = this.imageRef.current.clientHeight;\r\n        const spans = Math.ceil(height / 15) + 1;\r\n        this.setState({ spans });\r\n    };\r\n\r\n    render() {\r\n        const img = this.props.images;\r\n        return (\r\n            <div\r\n                style={{ gridRowEnd: `span ${this.state.spans}` }}\r\n                className=\"image-card\"\r\n            >\r\n                <a\r\n                    href={img.link}\r\n                    target=\"_blank\"\r\n                    rel=\"noreferrer\"\r\n                    className=\"link\"\r\n                >\r\n                    <img\r\n                        ref={this.imageRef}\r\n                        src={img.src}\r\n                        alt={img.alt}\r\n                        title={img.alt}\r\n                        className=\"image\"\r\n                    />\r\n                </a>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport \"./ImageList.styles.scss\";\r\n\r\nimport ImageCard from \"../ImageCard/ImageCard.component\";\r\n\r\nconst ImageList = ({ images }) => {\r\n    return (\r\n        <div className=\"image-container\">\r\n            {images.map((img) => (\r\n                <ImageCard key={img.id} images={img} />\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ImageList;\r\n","export default __webpack_public_path__ + \"static/media/spinner.8b736181.svg\";","import React, { Component } from \"react\";\r\nimport \"./App.scss\";\r\n\r\nimport { pexelsAPI } from \"./API/pexels.api\";\r\nimport { unsplashAPI } from \"./API/unsplash.api\";\r\n\r\nimport SearchBar from \"./components/SearchBar/SearchBar.component\";\r\nimport ImageList from \"./components/ImageList/ImageList.component\";\r\n\r\nimport ReactLogo from \"./assets/spinner.svg\";\r\n\r\nexport default class App extends Component {\r\n    state = {\r\n        query: \"daily new\",\r\n        images: [],\r\n        page: 1,\r\n        per_page: 5,\r\n        prevY: 0,\r\n        loading: false,\r\n    };\r\n\r\n    handleFormSubmit = async (query) => {\r\n        if (this.state.query !== query) {\r\n            this.setState({ query, images: [], page: 1, prevY: 0 });\r\n        }\r\n        this.setState({ loading: true });\r\n        const page_num = this.state.page;\r\n\r\n        try {\r\n            const unsplash = await unsplashAPI.get(\"/search/photos\", {\r\n                params: {\r\n                    query: this.state.query,\r\n                    page: this.state.page,\r\n                    per_page: this.state.per_page,\r\n                },\r\n            });\r\n            unsplash.data.results.map((img) =>\r\n                this.setState({\r\n                    images: [\r\n                        ...this.state.images,\r\n                        {\r\n                            id: `${img.id + page_num}`,\r\n                            src: img.urls.regular,\r\n                            alt: img.alt_description,\r\n                            link: img.links.html,\r\n                        },\r\n                    ],\r\n                })\r\n            );\r\n        } catch (e) {\r\n            console.warn(\"Unsplash Might Be Down\", e);\r\n        }\r\n\r\n        try {\r\n            const pexels = await pexelsAPI.get(\"/search\", {\r\n                params: {\r\n                    query,\r\n                    page: this.state.page,\r\n                    per_page: this.state.per_page,\r\n                },\r\n            });\r\n            pexels.data.photos.map((img) =>\r\n                this.setState({\r\n                    images: [\r\n                        ...this.state.images,\r\n                        {\r\n                            id: `${img.id + \"a\" + page_num}`,\r\n                            src: img.src.large2x,\r\n                            alt: `photographer ${img.photographer}`,\r\n                            link: img.url,\r\n                        },\r\n                    ],\r\n                })\r\n            );\r\n        } catch (e) {\r\n            console.warn(\"Pexels Might Be Down\", e);\r\n        }\r\n        if (this.state.per_page === 5) {\r\n            this.setState({ per_page: 10 });\r\n        }\r\n        this.setState({ loading: false });\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.handleFormSubmit(this.state.query);\r\n\r\n        const options = {\r\n            root: null,\r\n            rootMargin: \"0px\",\r\n            threshold: 0,\r\n        };\r\n\r\n        this.observer = new IntersectionObserver(\r\n            this.handleIntersection,\r\n            options\r\n        );\r\n\r\n        this.observer.observe(this.loadingRef);\r\n    }\r\n\r\n    handleIntersection = (entities, observer) => {\r\n        const y = entities[0].boundingClientRect.y;\r\n\r\n        if (this.state.prevY > y) {\r\n            const page = this.state.page + 1;\r\n            this.setState({ page });\r\n            this.handleFormSubmit(this.state.query);\r\n        }\r\n\r\n        this.setState({ prevY: y });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.state.loading ? (\r\n                    <div className=\"scroll\">\r\n                        <img className=\"loader\" src={ReactLogo} alt=\"spinner\" />\r\n                    </div>\r\n                ) : null}\r\n                <SearchBar handleFormSubmit={this.handleFormSubmit} />\r\n                <ImageList images={this.state.images} />\r\n                <div\r\n                    ref={(loadingRef) => (this.loadingRef = loadingRef)}\r\n                    className=\"load\"\r\n                ></div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport \"./index.scss\";\r\n\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.querySelector(\"#root\")\r\n);\r\n"],"sourceRoot":""}